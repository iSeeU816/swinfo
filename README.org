#+title: Swinfo - Get software information
#+author: iseeu
#+date: 2021-06-27 00:08:16 +0300

* Introduction

Swinfo (software information) is an Emacs package that returns
information for software in different methods, like sending the info to
the clipboard, echo or insert it in the current buffer. This package can
be helpful in situation where you want to report an issue but the
information for the tool in question is needed to help fix or narrow it
down.

There are five categories to get information from:

1. Static:

   This is for software that the chance they get updated are low or the
   user choose not to do so. Sometimes it better to feed the information
   manually than go with the hard or maybe tricky road to get the
   information from a specific software.

2. Repository:

   When you are using a software by compiling it from its source Git
   repository, it's easy to know which latest commit hash and date for a
   single repository; but what if you are having many repositories you
   want to check their information at once, it will take time to do so.
   This package can help you in this regards; you only need to add minor
   information about these repositories to get the information you are
   after.

3. Built-in package:

   You can provide a list of built-in packages and shape how their
   information is presented. Currently, the support for this category is
   shallow.

4. External package:

   This is for external packages installed by =package.el= library which
   are exist in "elpa" directory.

5. Unix tool:

   Unix tools are a lot and they have different options to output their
   version info. So, this package is doing a smart check and return the
   info as to let you not thinking much about the method but how to
   present the info.

* Installation

This package is currently not available in Melpa or any other package
archives. It's too young to put it in popular archives as things might
change frequently.

To use this package you need to clone it and then require it in your
Emacs init file.

1. Clone the package repository to a location that =load-path= variable
   is looking into:

   #+begin_src shell
git clone https://github.com/iSeeU816/swinfo
   #+end_src

2. There are two ways to setup this package:
   1. Emacs vanilla way:

      #+begin_src emacs-lisp
(require 'swinfo)
(with-eval-after-load 'swinfo
  (setq swinfo-static-list
        '((foo . (:sw-name "Foo" :sw-ver "0.8.16"))
          (bar . (:sw-name "Bar" :sw-ver "0.0.1"))))
  ;; Add other list customization here.

  (let ((map global-map))
    (define-key map (kbd "C-c i s") #'swinfo)
    (define-key map (kbd "C-c i i") #'swinfo-insert-info)
    (define-key map (kbd "C-c i e") #'swinfo-echo-info)
    (define-key map (kbd "C-c i y") #'swinfo-yank-info)))
      #+end_src

   2. [[https://github.com/jwiegley/use-package][use-package]] way:

      #+begin_src emacs-lisp
(use-package swinfo
  :load-path "/path/where/you/cloned/the/repository/swinfo"
  :config
  (setq swinfo-static-list
        '((foo . (:sw-name "Foo" :sw-ver "0.8.16"))
          (bar . (:sw-name "Bar" :sw-ver "0.0.1"))))
  :bind (("C-c i s" . swinfo)
         ("C-c i i" . swinfo-insert-info)
         ("C-c i e" . swinfo-echo-info)
         ("C-c i y" . swinfo-yank-info)))
      #+end_src

Note that these are examples setup, you should use real world data.
Refer to usage section below to know more about how to use this package.

* Usage

For minimal usage of this package, you can require its library with
=(require 'swinfo)= and only call =M-x swinfo= to choose from installed
external packages or even type a Unix tool name to insert their
information.

Here we go with a detailed instructions with some examples on how to use
this package:

** Static

1. First you set value for =swinfo-static-list= variable and evaluate
   it. You can add this to your Emacs init file:

   #+begin_src emacs-lisp
(setq swinfo-static-list
      '((foo . (:sw-name "Foo" :sw-ver "0.8.16"))
        (bar . (:sw-name "Bar" :sw-ver "0.0.1"))))
   #+end_src

2. Call =M-x swinfo= and type =foo= or select it from the list. You
   should have something like this:
   - =foo: Foo 0.8.16=.
3. You can use the Emacs Lisp form =(swinfo '(foo))= and evaluate it to
   get the same result as above. To evaluate it, just put the point
   after the closing parenthesis and hit =C-x C-e= or call =M-x
   eval-last-sexp= command.

** Repository

This shares the same structure as static category, except this has an
extra property key named =:dir=. That property key is essential to know
where the repository is located so Swinfo knows what =default-directory=
should be used when calling shell command related to Git.

1. Set =swinfo-repo-list= variable like this and evaluate it as
   mentioned in static section above:

   #+begin_src emacs-lisp
(setq swinfo-repo-list
      '((emacs-config . (:dir "~/.emacs.d"))
        (emacs-src . ( :dir "~/my_clone/emacs-src"
                       :sw-name "Emacs"
                       :command (funcall (lambda () (format "%s" emacs-version)))))))
   #+end_src

2. When calling =M-x swinfo= and then typing =emacs-config,emacs-src=
   and then hitting =RET=, the output should be like this:

   #+begin_src text
emacs-config: rev eddcda0520 on 2021-06-14
emacs-src: Emacs 28.0.50; rev cee502ea18 on 2021-05-29
   #+end_src

*Notes:*

- Notice how only =:dir= property key is defined in =emacs-config= cons
  list; which means no extra info should be printed. This type of style
  work well for repositories that are not related to a software.
- Not like the other example, where commit hash and date info are not
  enough; so the need to print the software name and version sometimes
  necessary and add such context about the repository in question.
- The comma character between software names in step 2 above is the
  default value of =crm-separator= variable. This is valid when dealing
  with a command that support multiple inputs, you know this if the
  command uses =completing-read-multiple= function instead of
  =completing-read= function.

** Built-in package

A simple category to shape the way that some built-in packages return
their versions.

1. Set =swinfo-built-in-package-list= variable to something like this
   and evaluate it:

   #+begin_src emacs-lisp
(setq swinfo-built-in-package-list
      '((org . (:sw-name "Org" :command (funcall org-version)))))
   #+end_src

2. Call =M-x swinfo= and type =org= to get info like this:
   - =org: Org 9.4.4=.

** External packages

This category currently only concern about packages installed by
=package.el= library which they installed in =elpa= directory.

No needed setup for this category, just call =M-x swinfo= and type a
package name to get its info. For example =magit= which the output
should look like this:

#+begin_src text
magit: magit-20210531.1524; rev 4a8646a30d
#+end_src

Or you can use an Emacs Lisp form =(swinfo '(magit))= to get the same
result.

** Unix tool

This is a powerful category to have. It simply returns the first line of
the output that Unix tool version command sends out.

Call =M-x swinfo= and then type a Unix tool to get its version info. For
example =git= should returns =git: git version 2.32.0=.

When using Emacs Lisp form, you must double quote the Unix tool name, so
the above example should look like this =(swinfo '("git"))= and the
output is the same.

*IMPORTANT NOTE:* The name of Unix tool that you provide must match the
 full name. No fuzzy search is applied here, so =(swinfo '("gi"))=
 signals an error if you meant to get Git version and there is no =gi=
 tool is installed. To check of what you should type, run this command
 in a shell ~$ type git~ which should NOT signal an error but output the
 path for the tool; of course, change =git= here with the Unix tool in
 mind.

** Mix

You can mix categories together in one command to get the information
you're after.

For example =(swinfo '(emacs-src "git" magit))= should output this:

#+begin_src text
emacs-src: Emacs 28.0.50; rev cee502ea18 on 2021-05-29
git: git version 2.32.0
magit: magit-20210531.1524; rev 4a8646a30d
#+end_src

The order of the output is the same order in the command.

** Output methods

Swinfo provides three methods to get the information.

*** Yank (send info to the clipboard)

You can send the info to the clipboard by doing any of the following
items:

+ Hit =C-u= (control-u) and then call Swinfo command by either =M-x
  swinfo= or invoke the key binding that you might assigned it to
  =swinfo= command.

+ In Emacs Lisp form: =(swinfo '(magit) 'yank)=. Notice the =yank=
  symbol.

*** Echo (echo info to echo area)

You might wants to check a version info for a package, this is what
echo feature is for.

+ Hit =C-u C-u= (control-u twice) and then call Swinfo command by either
  =M-x swinfo= or invoke the key binding that you might assigned it to
  =swinfo= command.

+ Same as yank method, you just need to use =echo= symbol instead.
  =(swinfo '(magit) 'echo)=.

*** Insert (insert info in the current buffer)

You're in middle of reporting something and wants to mention what
version of software you're using as it might adds context to the issue
in mind; here where this method shines.

+ With this method, you just call =M-x swinfo= or invoke the key binding
  to =swinfo= command.

+ You can use four different forms of Emacs Lisp with this method:

  1. =(swinfo '(magit) 'insert)=: Use =insert= symbol for the optional
     argument.
  2. =(swinfo '(magit) t)=.
  3. =(swinfo '(magit) nil)=.
  4. =(swinfo '(magit))=: You can omit the optional argument all
     together.

* Contribute

Please report a bug if you encounter one or request a feature if it's in
this project scope.

Of course, you can contribute to the code if you want to. Thanks!

* License

GNU General Public License, version 3.0.
